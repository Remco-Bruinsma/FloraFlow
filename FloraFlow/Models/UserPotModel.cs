// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var userPotModel = UserPotModel.FromJson(jsonString);

namespace UserPotModel_QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class UserPotModels
    {
        [JsonProperty("pot_ID")]
        public long PotId { get; set; }

        [JsonProperty("amount")]
        public long Amount { get; set; }

        [JsonProperty("plant")]
        public Plant Plant { get; set; }

        [JsonProperty("soil_hydration")]
        public long SoilHydration { get; set; }

        /*[JsonProperty("customer_code")]
        public string CustomerCode { get; set; }*/
    }

    public partial class Plant
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("plant_name")]
        public string PlantName { get; set; }

        [JsonProperty("use_of_water")]
        public long UseOfWater { get; set; }

        [JsonProperty("time_delay")]
        public long TimeDelay { get; set; }

        [JsonProperty("plant_description")]
        public string PlantDescription { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("hydration_needed")]
        public long HydrationNeeded { get; set; }
    }

    public partial class UserPotModel
    {
        public static UserPotModels[] FromJson(string json) => JsonConvert.DeserializeObject<UserPotModels[]>(json, UserPotModel_QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this UserPotModels[] self) => JsonConvert.SerializeObject(self, UserPotModel_QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

